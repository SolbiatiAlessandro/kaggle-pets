n_splits = 3
verbose_eval = 1000
num_rounds = 60000
early_stop = 500

from sklearn.model_selection import StratifiedKFold
kf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=1337)

oof_train = np.zeros((X_train.shape[0]))
oof_test = np.zeros((X_test.shape[0], n_splits))

i = 0

for train_idx, valid_idx in kf.split(X_train, X_train['target'].values):

    X_tr = X_train.iloc[train_idx, :]
    X_val = X_train.iloc[valid_idx, :]

    y_tr = X_tr['target'].values
    X_tr = X_tr.drop(['target'], axis=1)

    y_val = X_val['target'].values
    X_val = X_val.drop(['target'], axis=1)

    d_train = xgb.DMatrix(data=X_tr, label=y_tr, feature_names=X_tr.columns)
    d_valid = xgb.DMatrix(data=X_val, label=y_val, feature_names=X_val.columns)

    watchlist = [(d_train, 'train'), (d_valid, 'valid')]
    model = xgb.train(dtrain=d_train, num_boost_round=num_rounds, evals=watchlist,
                     early_stopping_rounds=early_stop, verbose_eval=verbose_eval, params=params)

    valid_pred = model.predict(xgb.DMatrix(X_val, feature_names=X_val.columns), ntree_limit=model.best_ntree_limit)
    test_pred = model.predict(xgb.DMatrix(X_test, feature_names=X_test.columns), ntree_limit=model.best_ntree_limit)

    oof_train[valid_idx] = valid_pred
    oof_test[:, i] = test_pred

    i += 1
return model, oof_train, oof_test
